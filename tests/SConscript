from __future__ import print_function
# vim: set filetype=python :

import SCons
import os
import sys
import time
import subprocess
import glob

Import('env')
ReadFileList = env['_ReadFileList']
AddRPATH = env['_AddRPATH']
PrependLibraryPaths = env['_PrependLibraryPaths']

libs=['galsim']

env1 = env.Clone(CPPDEFINES=[],LIBS=libs+env['LIBS'])

env1['OBJPREFIX'] = '.obj/'

bin_dir = 'bin'
lib_dir = 'lib'

# Include the library location within the executable.
AddRPATH(env1,Dir('#lib').abspath)

# The following are the .cpp test programs.  These need to be compiled first.
cpp_list = ReadFileList('files.txt')

obj_list = env1.StaticObject(cpp_list)

cpp_test_name = os.path.join('#bin','test_main')
cpp_test = env1.Program( cpp_test_name , ['test_main.cpp' , obj_list] )

# Define an action for running pytest, storing the output in a log file
def run_tests(target, source, env):

    log = open(str(target[0]),'w')

    # We only run pytest if we found pytest in the path.
    if env['PYTEST']:
        print('Using pytest from: ',env['PYTEST'])
        cmd = env['PYTEST']
        # Account for SIP on El Capitan
        cmd = PrependLibraryPaths(cmd,env)
        if env.GetOption('num_jobs') > 1:
            cmd += ' -n=%d --timeout=60'%(env.GetOption('num_jobs'))
            print('pytest is version %s... running tests in parallel with %d jobs'%(
                    env['PYTESTVERSION'], env.GetOption('num_jobs')))
            if 'BAD_BLAS' in env:
                print()
                print('WARNING: There is a good chance this will not work given that you seem')
                print('         to be using a TMV installation that calls the Apple BLAS')
                print('         library with OSX >= 10.7.  See the above warning about this.')
                print()
            print('If you have trouble with the parallel test run, you may disable it by typing:')
            print('    scons tests -j1')
            print('Also, if you get an error about unrecognized arguments, you might need to run:')
            print('    pip install pytest-xdist pytest-timeout --user')
        else:
            print('pytest is version %s'%env['PYTEST'])
        cmd += ' test*.py'
        print('\nStarting python tests...')
        log.write('pytest version is: ' + env['PYTEST'] + '\n')
        log.write('pytest command is:\n' + cmd + '\n')
        py_proc = subprocess.Popen(
            ['bash', '-c', cmd],
            cwd='tests',
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            shell=False)

        # Keep track of the complete output so we can search it for TimedOutException.
        total_buf = ''

        # This bit mimics the actions of the Unix tee command.
        # It writes to both stdout and the log file.
        while py_proc.poll() is None:
            buf = os.read(py_proc.stdout.fileno(),1).decode('utf-8')
            sys.stdout.write(buf)
            sys.stdout.flush()
            total_buf += buf
            log.write(buf)
        # Read anything that is still in the buffer:
        buf = os.read(py_proc.stdout.fileno(),10000).decode('utf-8')
        total_buf += buf
        sys.stdout.write(buf)
        sys.stdout.flush()
        log.write(buf)

        ret = py_proc.returncode
        if ret < 0:
            print('pytest terminated by signal ',-ret)
        elif ret > 0:
            print('pytest returned error code ',ret)
            # Check if we are timing out from parallel jobs
            import re
            timed_out = re.search("TimedOutException", total_buf)
            if timed_out:
                print()
                print('WARNING: Some of these errors are TimedOutExceptions.')
                print('         This usually indicates that you are running too many jobs in ')
                print('         parallel.  For example, you may have other jobs running on some of')
                print('         the CPUs, which are slowing down the tests, or SCons may be ')
                print('         incorrectly detecting the number of CPUs to be more than you')
                print('         actually have.')
                print()
                print('         The solution is usually to run the tests with fewer jobs.')
                print('         e.g. To use 4 jobs, write "scons -j4 tests".')
        else:
            print('pytest finished successfully.')
        if ret != 0:
            env.Exit(ret)
    else:
        print()
        print('WARNING: Could not find pytest in path.')
        print('         The cpp test programs will be compiled and run,')
        print('         but you will have to run the python tests manually.')
        print('         To do so, type: ')
        print('             cd tests ')
        print('             run_all_tests ')
        print('         If this doesn\'t end with an error, then the tests all passed.')

    # Always run cpp tests
    if True:
        print('\nStarting cpp tests...')
        cmd = str(source[0])
        cmd = PrependLibraryPaths(cmd,env)
        cpp_proc = subprocess.Popen(
            ['bash', '-c', cmd],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            shell=False)

        while cpp_proc.poll() is None:
            buf = os.read(cpp_proc.stdout.fileno(),1).decode('utf-8')
            sys.stdout.write(buf)
            sys.stdout.flush()
            log.write(buf)
        buf = os.read(cpp_proc.stdout.fileno(),10000).decode('utf-8')
        sys.stdout.write(buf)
        sys.stdout.flush()
        log.write(buf)

        ret = cpp_proc.returncode
        if ret < 0:
            print('test_main terminated by signal ',-ret)
        elif ret > 0:
            print('test_main returned error code ',ret)
        else:
            print('test_main finished successfully.')
        if ret != 0:
            env.Exit(ret)
    print()

test_builder = Builder( action = run_tests )
env1.Append(BUILDERS = {'RunTests' : test_builder} )

test_script = env1.RunTests(target='tests.log', source = cpp_test)

# Add explicit dependancy of test_script on all the python files, since
# scons has no way of realizing it.
py_dir = os.path.join("#","galsim")
real_py_dir = GetBuildPath(py_dir)
py_files = glob.glob( os.path.join(real_py_dir,"*.py") )
py_files += [os.path.join(real_py_dir,"_galsim.so")]
Depends(test_script , py_files)

AlwaysBuild(test_script)

env1.Alias(target='tests', source=test_script)
